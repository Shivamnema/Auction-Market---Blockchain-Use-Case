'use strict'

const generic = require('@nodeguy/generic')
const _ = generic._
const is = require('@nodeguy/type').is

const toString = generic.function({name: 'toString', curry: true})

// https://www.ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring
toString.method([is(Object)],
  (object) =>
    object.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-function.prototype.tostring
toString.method([is(Function)],
  (func) =>
    func.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-boolean.prototype.tostring
toString.method([is(Boolean)],
  (boolean) =>
    boolean.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-symbol.prototype.tostring
toString.method([is(Symbol)],
  (symbol) =>
    symbol.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-error.prototype.tostring
toString.method([is(Error)],
  (error) =>
    error.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-date.prototype.tostring
toString.method([is(Date)],
  (date) =>
    date.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-string.prototype.tostring
toString.method([is(String)],
  (string) =>
    string.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring
toString.method([is(RegExp)],
  (regExp) =>
    regExp.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.tostring
toString.method([is(Array)],
  (array) =>
    array.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.tostring
toString.method([is(Int8Array)],
  (int8Array) =>
    int8Array.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.tostring
toString.method([is(Uint8Array)],
  (uint8Array) =>
    uint8Array.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.tostring
toString.method([is(Uint8ClampedArray)],
  (uint8ClampedArray) =>
    uint8ClampedArray.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.tostring
toString.method([is(Int16Array)],
  (int16Array) =>
    int16Array.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.tostring
toString.method([is(Uint16Array)],
  (uint16Array) =>
    uint16Array.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.tostring
toString.method([is(Int32Array)],
  (int32Array) =>
    int32Array.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.tostring
toString.method([is(Uint32Array)],
  (uint32Array) =>
    uint32Array.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.tostring
toString.method([is(Float32Array)],
  (float32Array) =>
    float32Array.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.tostring
toString.method([is(Float64Array)],
  (float64Array) =>
    float64Array.toString()
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-number.prototype.tostring
toString.method([_, is(Number)],
  (radix, number) =>
    number.toString(radix)
)

module.exports = toString
