'use strict'

const generic = require('@nodeguy/generic')
const _ = generic._
const is = require('@nodeguy/type').is

const map = generic.function({name: 'map', curry: true})

map.method([is(Function), is(Object)],
  (callbackfn, object) =>
    Object.assign(...Object.keys(object).map((key) => {
      const [mappedKey, mappedValue] = callbackfn([key, object[key]])
      return {[mappedKey]: mappedValue}
    }))
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.map
map.method([_, is(Array)],
  (callbackfn, array) =>
    array.map(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.map
map.method([_, is(Int8Array)],
  (callbackfn, int8Array) =>
    int8Array.map(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.map
map.method([_, is(Uint8Array)],
  (callbackfn, uint8Array) =>
    uint8Array.map(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.map
map.method([_, is(Uint8ClampedArray)],
  (callbackfn, uint8ClampedArray) =>
    uint8ClampedArray.map(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.map
map.method([_, is(Int16Array)],
  (callbackfn, int16Array) =>
    int16Array.map(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.map
map.method([_, is(Uint16Array)],
  (callbackfn, uint16Array) =>
    uint16Array.map(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.map
map.method([_, is(Int32Array)],
  (callbackfn, int32Array) =>
    int32Array.map(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.map
map.method([_, is(Uint32Array)],
  (callbackfn, uint32Array) =>
    uint32Array.map(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.map
map.method([_, is(Float32Array)],
  (callbackfn, float32Array) =>
    float32Array.map(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.map
map.method([_, is(Float64Array)],
  (callbackfn, float64Array) =>
    float64Array.map(callbackfn)
)

map.method([is(Function), is(Set)],
  (callbackfn, set) =>
    new Set(Array.from(set).map(callbackfn))
)

module.exports = map
