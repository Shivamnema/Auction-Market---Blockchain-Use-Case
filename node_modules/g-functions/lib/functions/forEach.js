'use strict'

const generic = require('@nodeguy/generic')
const _ = generic._
const is = require('@nodeguy/type').is

const forEach = generic.function({name: 'forEach', curry: true})

// https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.foreach
forEach.method([_, is(Array)],
  (callbackfn, array) =>
    array.forEach(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.foreach
forEach.method([_, is(Int8Array)],
  (callbackfn, int8Array) =>
    int8Array.forEach(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.foreach
forEach.method([_, is(Uint8Array)],
  (callbackfn, uint8Array) =>
    uint8Array.forEach(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.foreach
forEach.method([_, is(Uint8ClampedArray)],
  (callbackfn, uint8ClampedArray) =>
    uint8ClampedArray.forEach(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.foreach
forEach.method([_, is(Int16Array)],
  (callbackfn, int16Array) =>
    int16Array.forEach(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.foreach
forEach.method([_, is(Uint16Array)],
  (callbackfn, uint16Array) =>
    uint16Array.forEach(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.foreach
forEach.method([_, is(Int32Array)],
  (callbackfn, int32Array) =>
    int32Array.forEach(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.foreach
forEach.method([_, is(Uint32Array)],
  (callbackfn, uint32Array) =>
    uint32Array.forEach(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.foreach
forEach.method([_, is(Float32Array)],
  (callbackfn, float32Array) =>
    float32Array.forEach(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.foreach
forEach.method([_, is(Float64Array)],
  (callbackfn, float64Array) =>
    float64Array.forEach(callbackfn)
)

forEach.method([is(Function), is(Object)],
  (callbackfn, object) =>
    Object.keys(object).forEach((key) => {
      callbackfn(key, object[key])
    })
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-map.prototype.foreach
forEach.method([_, is(Map)],
  (callbackfn, map) =>
    map.forEach(callbackfn)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-set.prototype.foreach
forEach.method([_, is(Set)],
  (callbackfn, set) =>
    set.forEach(callbackfn)
)

module.exports = forEach
