'use strict'

const generic = require('@nodeguy/generic')
const _ = generic._
const is = require('@nodeguy/type').is

const slice = generic.function({name: 'slice', curry: true})

// https://www.ecma-international.org/ecma-262/6.0/#sec-string.prototype.slice
slice.method([_, _, is(String)],
  (start, end, string) =>
    string.slice(start, end)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.slice
slice.method([_, _, is(Array)],
  (start, end, array) =>
    array.slice(start, end)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.slice
slice.method([_, _, is(Int8Array)],
  (start, end, int8Array) =>
    int8Array.slice(start, end)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.slice
slice.method([_, _, is(Uint8Array)],
  (start, end, uint8Array) =>
    uint8Array.slice(start, end)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.slice
slice.method([_, _, is(Uint8ClampedArray)],
  (start, end, uint8ClampedArray) =>
    uint8ClampedArray.slice(start, end)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.slice
slice.method([_, _, is(Int16Array)],
  (start, end, int16Array) =>
    int16Array.slice(start, end)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.slice
slice.method([_, _, is(Uint16Array)],
  (start, end, uint16Array) =>
    uint16Array.slice(start, end)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.slice
slice.method([_, _, is(Int32Array)],
  (start, end, int32Array) =>
    int32Array.slice(start, end)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.slice
slice.method([_, _, is(Uint32Array)],
  (start, end, uint32Array) =>
    uint32Array.slice(start, end)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.slice
slice.method([_, _, is(Float32Array)],
  (start, end, float32Array) =>
    float32Array.slice(start, end)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.slice
slice.method([_, _, is(Float64Array)],
  (start, end, float64Array) =>
    float64Array.slice(start, end)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-arraybuffer.prototype.slice
slice.method([_, _, is(ArrayBuffer)],
  (start, end, arrayBuffer) =>
    arrayBuffer.slice(start, end)
)

module.exports = slice
