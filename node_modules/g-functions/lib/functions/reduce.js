'use strict'

const generic = require('@nodeguy/generic')
const _ = generic._
const is = require('@nodeguy/type').is

const reduce = generic.function({name: 'reduce', curry: true})

// https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.reduce
reduce.method([_, _, is(Array)],
  (callbackfn, initialValue, array) =>
    array.reduce(callbackfn, initialValue)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.reduce
reduce.method([_, _, is(Int8Array)],
  (callbackfn, initialValue, int8Array) =>
    int8Array.reduce(callbackfn, initialValue)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.reduce
reduce.method([_, _, is(Uint8Array)],
  (callbackfn, initialValue, uint8Array) =>
    uint8Array.reduce(callbackfn, initialValue)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.reduce
reduce.method([_, _, is(Uint8ClampedArray)],
  (callbackfn, initialValue, uint8ClampedArray) =>
    uint8ClampedArray.reduce(callbackfn, initialValue)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.reduce
reduce.method([_, _, is(Int16Array)],
  (callbackfn, initialValue, int16Array) =>
    int16Array.reduce(callbackfn, initialValue)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.reduce
reduce.method([_, _, is(Uint16Array)],
  (callbackfn, initialValue, uint16Array) =>
    uint16Array.reduce(callbackfn, initialValue)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.reduce
reduce.method([_, _, is(Int32Array)],
  (callbackfn, initialValue, int32Array) =>
    int32Array.reduce(callbackfn, initialValue)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.reduce
reduce.method([_, _, is(Uint32Array)],
  (callbackfn, initialValue, uint32Array) =>
    uint32Array.reduce(callbackfn, initialValue)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.reduce
reduce.method([_, _, is(Float32Array)],
  (callbackfn, initialValue, float32Array) =>
    float32Array.reduce(callbackfn, initialValue)
)

// https://www.ecma-international.org/ecma-262/6.0/#sec-%typedarray%.prototype.reduce
reduce.method([_, _, is(Float64Array)],
  (callbackfn, initialValue, float64Array) =>
    float64Array.reduce(callbackfn, initialValue)
)

module.exports = reduce
