'use strict'

const AsyncQueue = require('./AsyncQueue')
const generic = require('@nodeguy/generic')
const is = require('@nodeguy/type').is
const to = require('./to')

const forEach = generic.create({name: 'forEach', curry: true})

forEach.method([is(Function), is(Object)],
  (callback, object) => {
    for (const property in object) {
      callback(property, object[property])
    }

    return object
  }
)

// AsyncIterable
forEach.method([is(Function), is('AsyncIterable')],
  (callback, asyncIterable) => {
    const input = to('Iterator', asyncIterable)

    return AsyncQueue((push) => {
      input.next().then(
        (result) => {
          if (!result.done) {
            callback(result.value)
          }

          push(Promise.resolve(result))
        },
        (reason) => {
          push(Promise.reject(reason))
        }
      )
    })
  }
)

// Iterable
forEach.method([is(Function), is('Iterable')],
  function * (callback, iterable) {
    for (let value of to('Iterator', iterable)) {
      callback(value)
      yield value
    }
  }
)

forEach.method([is(Function), is(Array)],
  (callback, array) => {
    array.forEach((element) => callback(element))
    return array
  }
)

module.exports = forEach
