'use strict'

const AsyncQueue = require('./AsyncQueue')
const generic = require('@nodeguy/generic')
const is = require('@nodeguy/type').is
const to = require('./to')
const _ = generic._

const map = generic.create({name: 'map', curry: true})

// Object
map.method([is(Function), x => !is(Function, x) && is(Object, x)],
  (callback, object) => {
    const result = {}

    for (let property in object) {
      const mapped = callback([property, object[property]])
      result[mapped[0]] = mapped[1]
    }

    return result
  }
)

// AsyncIterable
map.method([is(Function), is('AsyncIterable')],
  (callback, asyncIterable) => {
    const input = to('Iterator', asyncIterable)

    return AsyncQueue((push) => {
      input.next().then(
        (result) => {
          push(Promise.resolve(result.done
            ? result
            : {done: false, value: callback(result.value)}
          ))
        },
        (reason) => {
          push(Promise.reject(reason))
        }
      )
    })
  }
)

// Iterable
map.method([is(Function), is('Iterable')],
  function * (callback, iterable) {
    for (let value of iterable) {
      yield callback(value)
    }
  }
)

// Map
map.method([is(Function), is(Map)],
  (callback, mapObject) => new Map(map(callback, Array.from(mapObject)))
)

// Array
map.method([is(Function), is(Array)],
  (callback, array) =>
    array.map((value) => callback(value))
)

// Map instead of Function
map.method([is(Map), _],
  (substitutions, any) =>
    map(substitutions.get.bind(substitutions), any)
  )

module.exports = map
