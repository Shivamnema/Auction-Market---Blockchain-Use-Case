'use strict'

const AsyncQueue = require('./AsyncQueue')
const generic = require('@nodeguy/generic')
const is = require('@nodeguy/type').is
const to = require('./to')

const chain = generic.create({name: 'chain', curry: true})

chain.method([is(Function), is('AsyncIterable')],
  (callback, asyncIterable) => {
    const input = to('Iterator', asyncIterable)

    return AsyncQueue((push) => {
      input.next().then(
        (result) => {
          if (result.done) {
            push(Promise.resolve(result))
          } else {
            callback(result.value).forEach((value) => {
              push(Promise.resolve({done: false, value}))
            })
          }
        },
        (reason) => {
          push(Promise.reject(reason))
        }
      )
    })
  }
)

chain.method([is(Function), is('Iterable')],
  function * (callback, iterable) {
    for (let value of iterable) {
      for (let subvalue of callback(value)) {
        yield subvalue
      }
    }
  }
)

chain.method([is(Function), is(Array)],
  (callback, array) =>
    Array.prototype.concat.apply([], array.map(callback))
)

module.exports = chain
