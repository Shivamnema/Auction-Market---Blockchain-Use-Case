'use strict'

const AsyncQueue = (callback) => {
  const input = []
  const output = []

  const processQueues = () => {
    if ((input.length > 0) && (output.length > 0)) {
      const nextInput = input.shift()
      const nextOutput = output.shift()
      nextInput.then(nextOutput.resolve, nextOutput.reject)
      setImmediate(processQueues)
    }
  }

  const push = (promise) => {
    input.push(promise)

    // Don't use setImmediate to call processQueues here because it can lead
    // to Bluebird generating spurious warnings about unhandled rejections.
    // See
    // http://stackoverflow.com/questions/31028743/asynchronous-promise-
    // handling-with-bluebird.
    processQueues()
  }

  return {
    isPulling: () => output.length > input.length,
    push,

    [Symbol.asyncIterator]: () => ({
      next: () =>
        new Promise((resolve, reject) => {
          output.push({resolve, reject})

          if ((callback !== undefined) && (input.length === 0)) {
            callback(push)
          }

          processQueues()
        })
    })
  }
}

module.exports = AsyncQueue
