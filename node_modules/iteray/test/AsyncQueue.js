'use strict'

const assert = require('assert')
const I = require('../lib')
const is = require('@nodeguy/type').is

describe('AsyncIterable', function () {
  it('is an AsyncIterable', function () {
    assert(is('AsyncIterable', I.AsyncQueue()))
  })

  it('allows promises to be pushed onto the queue', function () {
    const asyncQueue = I.AsyncQueue()

    I.forEach(I.push(asyncQueue), [
      Promise.resolve({done: false, value: 1}),
      Promise.reject('one'),
      Promise.resolve({done: false, value: 2}),
      Promise.reject('two'),
      Promise.resolve({done: true})
    ])

    const iterator = I.to('Iterator', asyncQueue)

    return iterator.next().then((result) => {
      assert.deepEqual(result, {done: false, value: 1})

      return iterator.next().catch((reason) => {
        assert.equal(reason, 'one')

        return iterator.next().then((result) => {
          assert.deepEqual(result, {done: false, value: 2})

          return iterator.next().catch((reason) => {
            assert.equal(reason, 'two')

            return iterator.next().then((result) => {
              assert.deepEqual(result, {done: true})
            })
          })
        })
      })
    })
  })

  it("calls a callback function when 'next' is called", function (done) {
    I.to('Iterator', I.AsyncQueue(() => {
      done()
    })).next()
  })

  it('indicates when next() has been called before there is a result',
    function () {
      const asyncQueue = I.AsyncQueue()
      assert(!asyncQueue.isPulling())
      I.to('Iterator', asyncQueue).next()
      assert(asyncQueue.isPulling())
    })
})
