'use strict'

const assert = require('assert')
const I = require('../lib')
const is = require('@nodeguy/type').is
const stream = require('stream')

const elements = [1, 2, 3]

it('converts an Array of key-value pairs to an Object', function () {
  assert.deepEqual(I.to(Object, [['one', 1], ['two', 2]]), {one: 1, two: 2})
})

describe('Array', function () {
  it('Object', function () {
    assert.deepEqual(I.to(Array, {one: 1, two: 2}), [['one', 1], ['two', 2]])
  })

  it('Iterable', function () {
    assert.deepEqual(I.to(Array, I.to('Iterable', elements)), elements)
  })

  it('AsyncIterable', function () {
    return I.to(Array, I.to('AsyncIterable', elements)).then((array) => {
      assert.deepEqual(array, elements)
    })
  })
})

describe('Iterable', function () {
  it('Array', function () {
    const iterable = I.to('Iterable', elements)
    assert.deepEqual(I.to(Array, iterable), elements)
  })

  it('Function', function () {
    assert.deepEqual(I.to(Array, I.slice(0, 3, I.to('Iterable', () =>
      ({value: 1, done: false})
    ))), [1, 1, 1])
  })
})

describe('AsyncIterable', function () {
  it('Array', function () {
    I.to(Array, I.to('AsyncIterable', elements)).then((array) => {
      assert.deepEqual(array, elements)
    })
  })

  it('Iterable', function () {
    const asyncIterable = I.to('AsyncIterable', I.to('Iterable', elements))

    I.to(Array, asyncIterable).then((array) => {
      assert.deepEqual(array, elements)
    })
  })

  it('stream.Readable', function () {
    const asyncIterable = I.to('AsyncIterable', I.to(stream.Readable, elements))

    return I.to(Array, asyncIterable).then((array) => {
      assert.deepEqual(array, elements)
    })
  })
})

describe('Iterator', function () {
  it('AsyncIterable', function () {
    assert(is('Iterator', I.to('Iterator', I.to('Iterable', elements))))
  })

  it('AsyncIterable', function () {
    assert(is('Iterator', I.to('Iterator', I.to('AsyncIterable', elements))))
  })
})

describe("Node.js's stream.Readable", function () {
  it('Array', function () {
    return I.to(Array, I.to(stream.Readable, elements)).then((array) => {
      assert.deepEqual(array, elements)
    })
  })

  it('Iterable', function () {
    const readableStream = I.to(stream.Readable, I.to('Iterable', elements))

    return I.to(Array, readableStream).then((array) => {
      assert.deepEqual(array, elements)
    })
  })

  it('AsyncIterable', function () {
    const readableStream = I.to(
      stream.Readable,
      I.to('AsyncIterable', elements)
    )

    return I.to(Array, readableStream).then((array) => {
      assert.deepEqual(array, elements)
    })
  })
})
