'use strict'

const crypto = require('crypto')
const generic = require('@nodeguy/generic')
const I = require('iteray')

const hash = (object) =>
  crypto.createHash('sha256').update(JSON.stringify(object)).digest('base64')

const pullResponse = (pendingRequests, values) =>
  setImmediate(() => {
    values.next().then(({value: {error, id, result}}) => {
      const {reject, request, resolve} = pendingRequests[id]

      if (error) {
        reject(Object.assign(new Error(), request, error))
      } else {
        resolve(result)
      }

      delete pendingRequests[id]
      pullResponse(pendingRequests, values)
    })
  })

const client = (transport) => {
  let id
  const pendingRequests = {}
  const requests = I.AsyncQueue()

  const get = (target, method) =>
    (...params) =>
      new Promise((resolve, reject) => {
        const request = {method, params}
        id = hash([id, request])
        pendingRequests[id] = {request, resolve, reject}

        requests.push(Promise.resolve({
          done: false,
          value: Object.assign({}, request, {id, jsonrpc: '2.0'})
        }))
      })

  const {reasons, values} = I.splitPromises(transport(requests))
  pullResponse(pendingRequests, I.to('Iterator', values))

  return {
    methods: new Proxy({}, {get}),
    errors: reasons
  }
}

const transport = generic.function({name: 'transport'})
transport.method([{protocol: 'http:'}], require('./HTTP'))
transport.method([{protocol: 'ws:'}], require('./WebSocket'))

module.exports = {
  client,
  transport
}
