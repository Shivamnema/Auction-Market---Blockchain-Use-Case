'use strict'

const assert = require('assert')
const canon = require('canon')
const I = require('iteray')
const R = require('ramda')
const jsonRpc = require('../lib')

const mapTransport = (server) => R.pipe(
  I.map(canon.stringify),
  I.map(I.map((pair) => [canon.stringify(pair[0]), pair[1]], server))
)

describe('a client', function () {
  it('supports rpc call with positional parameters', function () {
    const server = new Map([
      [
        {
          id: 'ppLLCNrTqjAx6t3nv7g9fy0HbrUZ0z4AxruEmy8RS40=',
          jsonrpc: '2.0',
          method: 'subtract',
          params: [42, 23]
        },
        {
          id: 'ppLLCNrTqjAx6t3nv7g9fy0HbrUZ0z4AxruEmy8RS40=',
          jsonrpc: '2.0',
          result: 19
        }
      ],
      [
        {
          id: '3wj7P/fCxB6A6EywarID//lgMv/1on438QoP8EB7uE4=',
          jsonrpc: '2.0',
          method: 'subtract',
          params: [23, 42]
        },
        {
          id: '3wj7P/fCxB6A6EywarID//lgMv/1on438QoP8EB7uE4=',
          jsonrpc: '2.0',
          result: -19
        }
      ]
    ])

    const client = jsonRpc.client(mapTransport(server))
    const methods = client.methods

    return Promise.all([
      methods.subtract(42, 23),
      methods.subtract(23, 42)
    ]).then((values) => {
      assert.deepEqual(values, [19, -19])
    })
  })

  it('reports a rpc call of non-existent method', function () {
    const server = new Map([[
      {
        jsonrpc: '2.0',
        method: 'foobar',
        params: [],
        id: 'v6JqlT9iAcTiVmIPLjEpTjiz/aIVjt0Jqmo6I3lk4nM='
      },
      {
        jsonrpc: '2.0',
        error: {code: -32601, message: 'Method not found'},
        id: 'v6JqlT9iAcTiVmIPLjEpTjiz/aIVjt0Jqmo6I3lk4nM='
      }
    ]])

    const client = jsonRpc.client(mapTransport(server))

    return client.methods.foobar()
      .then(
        () => Promise.reject("We shouldn't get here."),
        (reason) => {
          assert(reason instanceof Error)

          assert.deepEqual(reason, {
            method: 'foobar',
            params: [],
            code: -32601,
            message: 'Method not found'
          })
        }
      )
  })
})

it('reports transport errors', function () {
  const responses = I.AsyncQueue()
  responses.push(Promise.reject('There was a transport error.'))
  const client = jsonRpc.client(() => responses)
  client.methods.foobar()

  return I.shift(client.errors).then((error) => {
    assert.deepEqual(error, 'There was a transport error.')
  })
})
